#include <Audio.h>
#include <Wire.h>
#include <SPI.h>
#include <SD.h>
#include <SerialFlash.h>

#include "HapTuner/pitch_utils.h"
#include "HapTuner/note_name.h"
#include "HapTuner/tuned_note.h"

// GUItool: begin automatically generated code
AudioInputUSB            usb1;           //xy=180,155
AudioSynthWaveformSineModulated sine_fm1;       //xy=403,298
AudioAnalyzeNoteFrequency notefreq1;      //xy=445,146
AudioConnection          patchCord1(usb1, 0, notefreq1, 0);
//AudioAnalyzePrint        print1;         //xy=410,226
AudioAnalyzePeak         peak1;
AudioConnection          patchCord2(usb1, 1, peak1, 0);
AudioPlayMemory          sound_1;
// GUItool: end automatically generated code


// Main Arduino code;
void setup() {
  Serial.begin(9600);
  AudioMemory(30);
  notefreq1.begin(1);

  float reference = 440.0;
  pitch_freqs = get_pitch_freqs(reference);
  pitch_names = get_pitch_names()
}

void loop() {
  //const unsigned int [209] = {0x8100D2E6, 0xFFFBFFFC, 0xFFF8FFFB, 0xFFF3FFF3, 0xFFF6FFF5, 0xFFEDFFF4, 0xFFE2FFE7, 0xFFDBFFDC, 0xFFD9FFD9, 0xFFDDFFDC, 0xFFDEFFDE, 0xFFDBFFDE, 0xFFD3FFD7, 0xFFCDFFCF, 0xFFC7FFCA, 0xFFC6FFC6, 0xFFC0FFC4, 0xFFBDFFBD, 0xFFBDFFBD, 0xFFB8FFBB, 0xFFAFFFB2, 0xFFABFFAC, 0xFFACFFAB, 0xFFACFFAD, 0xFFA7FFA9, 0xFFA5FFA5, 0xFF9DFFA2, 0xFF92FF97, 0xFF8CFF90, 0xFF88FF8A, 0xFF82FF86, 0xFF78FF7C, 0xFF79FF76, 0xFF75FF78, 0xFF6EFF71, 0xFF64FF6A, 0xFF57FF5E, 0xFF54FF55, 0xFF53FF54, 0xFF51FF52, 0xFF4BFF4F, 0xFF43FF45, 0xFF3DFF41, 0xFF34FF38, 0xFF30FF30, 0xFF32FF31, 0xFF2EFF31, 0xFF26FF29, 0xFF24FF26, 0xFF20FF23, 0xFF1FFF1F, 0xFF25FF21, 0xFF27FF27, 0xFF25FF25, 0xFF28FF25, 0xFF25FF26, 0xFF25FF24, 0xFF2CFF29, 0xFF2AFF2E, 0xFF1FFF25, 0xFF23FF1F, 0xFF2FFF2A, 0xFF30FF30, 0xFF35FF34, 0xFF3BFF38, 0xFF45FF3F, 0xFF48FF46, 0xFF4CFF48, 0xFF51FF4F, 0xFF5DFF57, 0xFF69FF66, 0xFF6EFF6C, 0xFF7BFF73, 0xFF89FF83, 0xFF91FF8C, 0xFF95FF94, 0xFF97FF96, 0xFFA3FF9C, 0xFFB1FFAB, 0xFFB4FFB3, 0xFFC0FFB9, 0xFFD4FFC9, 0xFFEAFFDF, 0xFFFCFFF2, 0x000E0005, 0x00200017, 0x00340029, 0x004D0040, 0x005F0055, 0x0075006A, 0x008A0080, 0x00990091, 0x00B300A6, 0x00D100C3, 0x00E100DB, 0x00F200E7, 0x010C00FF, 0x01270119, 0x013C0131, 0x01500146, 0x0165015B, 0x0176016E, 0x018B017F, 0x01A20197, 0x01B901AC, 0x01D001C6, 0x01E001D7, 0x01FB01EC, 0x0217020A, 0x0226021D, 0x0234022C, 0x0240023A, 0x024D0244, 0x02630258, 0x0272026D, 0x027A0278, 0x0287027F, 0x0293028F, 0x028D0291, 0x0294028F, 0x029D029B, 0x02990299, 0x02A0029C, 0x02A002A2, 0x0297029B, 0x02920293, 0x02950293, 0x02900295, 0x02810287, 0x0273027A, 0x0264026D, 0x0252025B, 0x0246024B, 0x0235023F, 0x021A0227, 0x0205020D, 0x01F701FF, 0x01DB01EC, 0x01B701C9, 0x019901A7, 0x017C018B, 0x015C016C, 0x013F014D, 0x01230132, 0x01000112, 0x00E100F0, 0x00C400D4, 0x00A300B4, 0x00830093, 0x00610071, 0x00420052, 0x001E0030, 0x00010010, 0xFFDEFFF1, 0xFFB8FFCB, 0xFF96FFA6, 0xFF7CFF87, 0xFF66FF72, 0xFF47FF58, 0xFF26FF36, 0xFF04FF15, 0xFEEAFEF5, 0xFED6FEE0, 0xFEB6FEC7, 0xFE9AFEA6, 0xFE87FE8F, 0xFE75FE80, 0xFE5AFE69, 0xFE3BFE48, 0xFE29FE30, 0xFE17FE20, 0xFE09FE0E, 0xFDFCFE04, 0xFDEAFDF4, 0xFDD3FDE0, 0xFDBBFDC5, 0xFDB3FDB6, 0xFDABFDAF, 0xFD9FFDA3, 0xFD95FD9A, 0xFD86FD8E, 0xFD81FD83, 0xFD7EFD81, 0xFD72FD79, 0xFD68FD6C, 0xFD69FD67, 0xFD68FD68, 0xFD5EFD64, 0xFD59FD5B, 0xFD5BFD5B, 0xFD5DFD5D, 0xFD60FD5E, 0xFD64FD61, 0xFD69FD67, 0xFD6CFD6B, 0xFD77FD71, 0xFD82FD7F, 0xFD89FD84, 0xFD98FD8F, 0xFDA4FD9E, 0xFDB0FDAA, 0xFDC4FDB9, 0xFDD6FDCD, 0xFDDCFDDB, 0xFDE7FDE3, 0xFDF0FDEC, 0xFDFFFDF6, 0xFE13FE0A, 0xFE26FE1C};

  if (notefreq.available()) {
    freq = notefreq.read();
    prob = notefreq.probability();

    // get the nearest note
    tuned_note n = freq_to_note(freq, pitch_freqs);
    int index = n.getPitch();
    double distance = n.getDistance();

    note_name note = *pitch_names[index];
    debug_note(freq, note, distance);
  }
}

void debug_note(double freq, note note, double distance) {
  Serial.printf("freq %f\n", freq);
  Serial.printf("closest tuned_note %c%c\n", note.getName(), note.getModifier());
  Serial.printf("distance to closest tuned_note %f\n\n", distance);
  // note that this ranges from -1 (most flat) to 1 (most sharp).
}
